---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import "../style/style.css";

const documents = await Astro.glob("../content/documents/*.md");
const doc_texts = documents.map((doc) => doc.rawContent());
const doc_headings = documents.map((doc) => doc.frontmatter.title);

import * as greetingText from "../content/welcome.md";
const greeting_text = greetingText.rawContent();

const simple_commands_raw = await Astro.glob("../content/simple-commands/*.md");
const simple_commands = simple_commands_raw.map((cmd) => [
	cmd.frontmatter.help,
	cmd.frontmatter.stub,
	cmd.rawContent(),
]);
---

<Layout title="Welcome to Astro.">
	<main>
		<script
			define:vars={{
				doc_texts,
				doc_headings,
				greeting_text,
				simple_commands,
			}}
		>
			var scanlines = $(".scanlines");
			var tv = $(".tv");

			var default_cmd_helps = [
				["help", "List commands"],
				["ls", "List documents"],
				["read <index>", "Open document"],
				["reset", "Reset terminal"],
			];

			var terminal = $("main").terminal(
				[
					{
						help: function () {
							const padding_width = 16;
							var header = "Command         Description";
							this.echo(header);
							this.echo("-".repeat(header.length));

							for (let i = 0; i < default_cmd_helps.length; i++) {
								const element = default_cmd_helps[i];
								const cmd = element[0];
								const text = element[1];
								var padding = " ".repeat(
									padding_width - cmd.length,
								);
								this.echo(cmd + padding + text);
							}

							for (let i = 0; i < simple_commands.length; i++) {
								const element = simple_commands[i];
								const cmd = element[1];
								const text = element[0];
								var padding = " ".repeat(
									padding_width - cmd.length,
								);
								this.echo(cmd + padding + text);
							}
						},
						echo: function (arg1) {
							this.echo(arg1);
						},
						ls: function () {
							// Note 4 spaces for split
							var header = "Index    Title";
							this.echo(header);
							this.echo("-".repeat(header.length));
							for (let i = 0; i < doc_headings.length; i++) {
								var padding = 9 - i.toString().length;
								this.echo(
									"" +
										(i + 1) +
										" ".repeat(padding) +
										doc_headings[i],
								);
							}
						},
						read: function (index) {
							if (
								typeof index === "undefined" ||
								index - 1 < 0 ||
								index > doc_headings.length
							) {
								this.echo("[[;red;]Index Not found!]");
							} else {
								this.echo(
									`[[bu;;]` + doc_headings[index - 1] + `]\n`,
								);
								this.typing("echo", "10", doc_texts[index - 1]);
							}
						},
						reset: function() {
							this.clear();
							this.echo(greeting_text);
						}
					},
					function (command) {
						// Returns simple text from simple-commands
						if (
							simple_commands
								.map((cmd) => cmd[1])
								.includes(command)
						) {
							index = simple_commands
								.map((cmd) => cmd[1])
								.indexOf(command);
							this.echo(simple_commands[index][2]);
						} else {
							this.echo(
								"[[;red;]Command '" + command + "' Not Found!]",
							);
						}
					},
				],
				{
					prompt: ">// ",
					greetings: false,
					onInit: function () {
						// console.log(greeting_text);
						this.echo(greeting_text);
					},
				},
			);
		</script>
		<div class="tv">
			<div id="terminal"></div>
			<div class="flicker"></div>
			<div class="scanlines"></div>
			<div class="noise"></div>
		</div>
	</main>
</Layout>
